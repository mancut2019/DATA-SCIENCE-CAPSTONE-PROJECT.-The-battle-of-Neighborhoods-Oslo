{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Battle of neighbourhoods Capstone Project: Relocating to Oslo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem Background:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Oslo is relatively small capital, but it has a long history and a charming range of old city quarters which each come with their own distinct character. Oslo is also one of the the fastest-growing capitals in Europe, and in recent years, some of its industrial areas have been turned into the most attractive and modern neighbourhoods for its ever-expanding population.\n",
    "The Akerselva River splits Oslo into the western and eastern districts. Officially, the city is divided into 15 boroughs or municipalities, which are largely self-governed. Each is responsible for its own clinics, kindergartens and other public services.\n",
    "The west is where established Norwegian families, the wealthy and most expats live, especially diplomats."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem Definition"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The goal of this exercise  is to identify and characterize suitable  areas to live in Oslo for a family with children and characterize them in terms of their socioeconomic characteristics."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Target Audience"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The main audience  would be people planning or relocating to Oslo specially families as the analysis will be focused in that segment.\n",
    "- Anybody interested in understanding Oslo\n",
    "- Data Scientists, who want to implement some of the most used Exploratory Data Analysis techniques to obtain necessary data, analyze it, and, finally be able to tell a story out of it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  - We will get The Names of Major Districts and Population from Wikipedia; https://en.wikipedia.org/wiki/List_of_boroughs_of_Oslo'\n",
    "  - Geopy will be used  to geolocate  these districts\n",
    "  - Foursquare API will be used to explore neighborhoods in Oslo, get the most common venue categories in each neighborhood, use the k-means clustering algorithm to find similar neighborhoods, use the Folium library to visualize the neighborhoods in Oslo and their emerging clusters.\n",
    "  - Finally we will used data downloaded from Norway statistics department to further  characterize the districts of interest. https://data.ssb.no/api/v0/dataset?lang=en. the data will be downloaded and manipulated  separately as it goes beyond this exercise  the use of the provided API"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.Methodology"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Packages installed  :)\n"
     ]
    }
   ],
   "source": [
    "# import necessary libraries \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import folium\n",
    "import requests\n",
    "import json\n",
    "from bs4 import BeautifulSoup\n",
    "import matplotlib.cm as cm\n",
    "import matplotlib.colors as colors\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import KMeans\n",
    "%matplotlib inline\n",
    "print('Packages installed  :)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1. Scrape Oslo Neighborhoods from Website\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the District data using beautiful soup \n",
    "url='https://en.wikipedia.org/wiki/List_of_boroughs_of_Oslo'\n",
    "result = requests.get(url)\n",
    "data_html = BeautifulSoup(result.content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now we will read the data into a Pandas Dataframe\n",
    "soup = BeautifulSoup(str(data_html))\n",
    "neigh = soup.find('table')\n",
    "table_str = str(neigh.extract())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Residents</th>\n",
       "      <th>Area</th>\n",
       "      <th>Number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Alna</td>\n",
       "      <td>49 801</td>\n",
       "      <td>13,7 km2</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>33 422</td>\n",
       "      <td>7,7 km2</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>59 269</td>\n",
       "      <td>8,3 km2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Gamle Oslo</td>\n",
       "      <td>58 671</td>\n",
       "      <td>7,5 km2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>27 707</td>\n",
       "      <td>8,2 km2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Grünerløkka</td>\n",
       "      <td>62 423</td>\n",
       "      <td>4,8 km2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Nordre Aker</td>\n",
       "      <td>52 327</td>\n",
       "      <td>13,6 km2</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Nordstrand</td>\n",
       "      <td>52 459</td>\n",
       "      <td>16,9 km2</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Sagene</td>\n",
       "      <td>45 089</td>\n",
       "      <td>3,1 km2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>St. Hanshaugen</td>\n",
       "      <td>38 945</td>\n",
       "      <td>3,6 km2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>Stovner</td>\n",
       "      <td>33 316</td>\n",
       "      <td>8,2 km2</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Søndre Nordstrand</td>\n",
       "      <td>39 066</td>\n",
       "      <td>18,4 km2</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>Ullern</td>\n",
       "      <td>34 596</td>\n",
       "      <td>9,4 km2</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Vestre Aker</td>\n",
       "      <td>50 157</td>\n",
       "      <td>16,6 km2</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>Østensjø</td>\n",
       "      <td>50 806</td>\n",
       "      <td>12,2 km2</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Borough Residents      Area  Number\n",
       "0                Alna    49 801  13,7 km2      12\n",
       "1              Bjerke    33 422   7,7 km2       9\n",
       "2             Frogner    59 269   8,3 km2       5\n",
       "3          Gamle Oslo    58 671   7,5 km2       1\n",
       "4              Grorud    27 707   8,2 km2      10\n",
       "5         Grünerløkka    62 423   4,8 km2       2\n",
       "6         Nordre Aker    52 327  13,6 km2       8\n",
       "7          Nordstrand    52 459  16,9 km2      14\n",
       "8              Sagene    45 089   3,1 km2       3\n",
       "9      St. Hanshaugen    38 945   3,6 km2       4\n",
       "10            Stovner    33 316   8,2 km2      11\n",
       "11  Søndre Nordstrand    39 066  18,4 km2      15\n",
       "12             Ullern    34 596   9,4 km2       6\n",
       "13        Vestre Aker    50 157  16,6 km2       7\n",
       "14           Østensjø    50 806  12,2 km2      13"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_district = pd.read_html(table_str)[0]\n",
    "df_district\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Residents</th>\n",
       "      <th>Number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Alna</td>\n",
       "      <td>49 801</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>33 422</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>59 269</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Gamle Oslo</td>\n",
       "      <td>58 671</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>27 707</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Grünerløkka</td>\n",
       "      <td>62 423</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Nordre Aker</td>\n",
       "      <td>52 327</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Nordstrand</td>\n",
       "      <td>52 459</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Sagene</td>\n",
       "      <td>45 089</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>St. Hanshaugen</td>\n",
       "      <td>38 945</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>Stovner</td>\n",
       "      <td>33 316</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Søndre Nordstrand</td>\n",
       "      <td>39 066</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>Ullern</td>\n",
       "      <td>34 596</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Vestre Aker</td>\n",
       "      <td>50 157</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>Østensjø</td>\n",
       "      <td>50 806</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Borough Residents  Number\n",
       "0                Alna    49 801      12\n",
       "1              Bjerke    33 422       9\n",
       "2             Frogner    59 269       5\n",
       "3          Gamle Oslo    58 671       1\n",
       "4              Grorud    27 707      10\n",
       "5         Grünerløkka    62 423       2\n",
       "6         Nordre Aker    52 327       8\n",
       "7          Nordstrand    52 459      14\n",
       "8              Sagene    45 089       3\n",
       "9      St. Hanshaugen    38 945       4\n",
       "10            Stovner    33 316      11\n",
       "11  Søndre Nordstrand    39 066      15\n",
       "12             Ullern    34 596       6\n",
       "13        Vestre Aker    50 157       7\n",
       "14           Østensjø    50 806      13"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Lets do some cleaning for column we do not need\n",
    "df_district.drop('Area',axis=1,inplace=True)\n",
    "df_district\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Though Sandvika is not  part of Oslo  is a popular residential area in the proximity so we will add it using Baerum municipality data as proxy. The data was obtained from Norway statistics department"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Residents</th>\n",
       "      <th>Number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Alna</td>\n",
       "      <td>49 801</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>33 422</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>59 269</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Gamle Oslo</td>\n",
       "      <td>58 671</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>27 707</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Grünerløkka</td>\n",
       "      <td>62 423</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Nordre Aker</td>\n",
       "      <td>52 327</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Nordstrand</td>\n",
       "      <td>52 459</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Sagene</td>\n",
       "      <td>45 089</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>St. Hanshaugen</td>\n",
       "      <td>38 945</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>Stovner</td>\n",
       "      <td>33 316</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Søndre Nordstrand</td>\n",
       "      <td>39 066</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>Ullern</td>\n",
       "      <td>34 596</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Vestre Aker</td>\n",
       "      <td>50 157</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>Østensjø</td>\n",
       "      <td>50 806</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>121000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Borough Residents  Number\n",
       "0                Alna    49 801    12.0\n",
       "1              Bjerke    33 422     9.0\n",
       "2             Frogner    59 269     5.0\n",
       "3          Gamle Oslo    58 671     1.0\n",
       "4              Grorud    27 707    10.0\n",
       "5         Grünerløkka    62 423     2.0\n",
       "6         Nordre Aker    52 327     8.0\n",
       "7          Nordstrand    52 459    14.0\n",
       "8              Sagene    45 089     3.0\n",
       "9      St. Hanshaugen    38 945     4.0\n",
       "10            Stovner    33 316    11.0\n",
       "11  Søndre Nordstrand    39 066    15.0\n",
       "12             Ullern    34 596     6.0\n",
       "13        Vestre Aker    50 157     7.0\n",
       "14           Østensjø    50 806    13.0\n",
       "15           Sandvika    121000     NaN"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#append row to the dataframe\n",
    "new_row = {'Borough':'Sandvika', 'Residents':121000,}\n",
    "df_district = df_district.append(new_row, ignore_index=True)\n",
    "df_district"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2 Use Geopy to obtain Latitude and Longitude of neighborhoods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from geopy.geocoders import Nominatim\n",
    "geolocator = Nominatim(user_agent=\"Oslo\")\n",
    "df_district['Major_Dist_Coord']= df_district['Borough'].apply(geolocator.geocode).apply(lambda x: (x.latitude, x.longitude))\n",
    "df_district[['Latitude', 'Longitude']] = df_district['Major_Dist_Coord'].apply(pd.Series)\n",
    "\n",
    "df_district.drop(['Major_Dist_Coord'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Residents</th>\n",
       "      <th>Number</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Alna</td>\n",
       "      <td>49 801</td>\n",
       "      <td>12.0</td>\n",
       "      <td>59.932417</td>\n",
       "      <td>10.835276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>33 422</td>\n",
       "      <td>9.0</td>\n",
       "      <td>59.941395</td>\n",
       "      <td>10.829208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>59 269</td>\n",
       "      <td>5.0</td>\n",
       "      <td>59.922224</td>\n",
       "      <td>10.706649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Gamle Oslo</td>\n",
       "      <td>58 671</td>\n",
       "      <td>1.0</td>\n",
       "      <td>59.899237</td>\n",
       "      <td>10.734767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>27 707</td>\n",
       "      <td>10.0</td>\n",
       "      <td>59.961424</td>\n",
       "      <td>10.880549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Grünerløkka</td>\n",
       "      <td>62 423</td>\n",
       "      <td>2.0</td>\n",
       "      <td>59.925471</td>\n",
       "      <td>10.777421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Nordre Aker</td>\n",
       "      <td>52 327</td>\n",
       "      <td>8.0</td>\n",
       "      <td>59.953638</td>\n",
       "      <td>10.756412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Nordstrand</td>\n",
       "      <td>52 459</td>\n",
       "      <td>14.0</td>\n",
       "      <td>54.487378</td>\n",
       "      <td>8.865286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Sagene</td>\n",
       "      <td>45 089</td>\n",
       "      <td>3.0</td>\n",
       "      <td>59.938273</td>\n",
       "      <td>10.765849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>St. Hanshaugen</td>\n",
       "      <td>38 945</td>\n",
       "      <td>4.0</td>\n",
       "      <td>59.927950</td>\n",
       "      <td>10.738958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>Stovner</td>\n",
       "      <td>33 316</td>\n",
       "      <td>11.0</td>\n",
       "      <td>59.962140</td>\n",
       "      <td>10.922823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Søndre Nordstrand</td>\n",
       "      <td>39 066</td>\n",
       "      <td>15.0</td>\n",
       "      <td>59.835944</td>\n",
       "      <td>10.798496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>Ullern</td>\n",
       "      <td>34 596</td>\n",
       "      <td>6.0</td>\n",
       "      <td>59.925818</td>\n",
       "      <td>10.665132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Vestre Aker</td>\n",
       "      <td>50 157</td>\n",
       "      <td>7.0</td>\n",
       "      <td>59.958300</td>\n",
       "      <td>10.670319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>Østensjø</td>\n",
       "      <td>50 806</td>\n",
       "      <td>13.0</td>\n",
       "      <td>59.887563</td>\n",
       "      <td>10.832748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>121000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>59.890726</td>\n",
       "      <td>10.527743</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Borough Residents  Number   Latitude  Longitude\n",
       "0                Alna    49 801    12.0  59.932417  10.835276\n",
       "1              Bjerke    33 422     9.0  59.941395  10.829208\n",
       "2             Frogner    59 269     5.0  59.922224  10.706649\n",
       "3          Gamle Oslo    58 671     1.0  59.899237  10.734767\n",
       "4              Grorud    27 707    10.0  59.961424  10.880549\n",
       "5         Grünerløkka    62 423     2.0  59.925471  10.777421\n",
       "6         Nordre Aker    52 327     8.0  59.953638  10.756412\n",
       "7          Nordstrand    52 459    14.0  54.487378   8.865286\n",
       "8              Sagene    45 089     3.0  59.938273  10.765849\n",
       "9      St. Hanshaugen    38 945     4.0  59.927950  10.738958\n",
       "10            Stovner    33 316    11.0  59.962140  10.922823\n",
       "11  Søndre Nordstrand    39 066    15.0  59.835944  10.798496\n",
       "12             Ullern    34 596     6.0  59.925818  10.665132\n",
       "13        Vestre Aker    50 157     7.0  59.958300  10.670319\n",
       "14           Østensjø    50 806    13.0  59.887563  10.832748\n",
       "15           Sandvika    121000     NaN  59.890726  10.527743"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_district.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.3 Explore Neighborhoods in Oslo.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.3.1 Visualize Oslo Neighborhoods in a map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Oslo, 0026, Norge\n",
      "The geographical coordinates of Oslo are, 59.9133301 10.7389701\n"
     ]
    }
   ],
   "source": [
    "## AGetting Oslo coordinates using Geocopy\n",
    "\n",
    "from geopy.geocoders import Nominatim\n",
    "geolocator = Nominatim(user_agent=\"Oslo Coord\")\n",
    "location = geolocator.geocode(\"Oslo\")\n",
    "print(location.address)\n",
    "print('The geographical coordinates of Oslo are,',location.latitude,location.longitude)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize Oslo an its neighborhoods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create list with the Boroughs (to be used later)\n",
    "boroughs = df_district['Borough'].unique().tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This will color categorize each borough\n",
    "borough_color = {}\n",
    "for Borough in boroughs:\n",
    "    borough_color[Borough]= '#%02X%02X%02X' % tuple(np.random.choice(range(256), size=3)) #Random color"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x1e9ffda4348>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "map_oslo = folium.Map(location=[59.9133301,10.7389701], zoom_start=11)\n",
    "\n",
    "# add markers to map\n",
    "for lat, lng, Borough, in zip(df_district['Latitude'], \n",
    "                             df_district['Longitude'],\n",
    "                             df_district['Borough']):\n",
    "    label_text = Borough + ' - ' \n",
    "    label = folium.Popup(label_text)\n",
    "    folium.CircleMarker(\n",
    "        [lat, lng],\n",
    "        radius=10,\n",
    "        popup=label,\n",
    "        color=borough_color[Borough],\n",
    "        fill_color=borough_color[Borough],\n",
    "        fill_opacity=0.8).add_to(map_oslo)  \n",
    "    \n",
    "map_oslo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.4 Explore Areas with Foursquare API"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define Foursquare credentials "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your credentials:\n",
      "CLIENT_ID: TBDZHFFO3MMND5HCUBVABQEK2HINXNPSMX34OUP2JEZYY1UG\n",
      "CLIENT_SECRET:DLHDG2IFHNI5XEVUCKX12MZEB0LUDFWIYKXW3IN4EDNTFXW4\n"
     ]
    }
   ],
   "source": [
    "CLIENT_ID = 'TBDZHFFO3MMND5HCUBVABQEK2HINXNPSMX34OUP2JEZYY1UG' # your Foursquare ID\n",
    "CLIENT_SECRET = 'DLHDG2IFHNI5XEVUCKX12MZEB0LUDFWIYKXW3IN4EDNTFXW4' # your Foursquare Secret\n",
    "VERSION = '20200709'\n",
    "print('Your credentials:')\n",
    "print('CLIENT_ID: ' + CLIENT_ID)\n",
    "print('CLIENT_SECRET:' + CLIENT_SECRET)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exploring the Major Districts\n",
    "\n",
    "    Create the get request url (Foursquare ID and Secret are necessary)\n",
    "    1.a. Number of Venues we will look for is 100 2.a. Radius of Search Would be 1 k.m.\n",
    "    Create a json from the request object (Need requests Module)\n",
    "    Create the lists Containing all the information\n",
    "    From the lists create the dataframe.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "radius = 1000\n",
    "LIMIT = 200\n",
    "\n",
    "def getNearbyVenues(names, latitudes, longitudes, radius=1000):\n",
    "    \n",
    "    venues_list=[]\n",
    "    for name, lat, lng in zip(names, latitudes, longitudes):\n",
    "        print(name)\n",
    "            \n",
    "        # create the API request URL\n",
    "        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n",
    "            CLIENT_ID, \n",
    "            CLIENT_SECRET, \n",
    "            VERSION, \n",
    "            lat, \n",
    "            lng, \n",
    "            radius, \n",
    "            LIMIT)\n",
    "            \n",
    "        # make the GET request\n",
    "        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n",
    "        \n",
    "        # return only relevant information for each nearby venue\n",
    "        venues_list.append([(\n",
    "            name, \n",
    "            lat, \n",
    "            lng, \n",
    "            v['venue']['name'], \n",
    "            v['venue']['location']['lat'], \n",
    "            v['venue']['location']['lng'],  \n",
    "            v['venue']['categories'][0]['name']) for v in results])\n",
    "\n",
    "    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n",
    "    nearby_venues.columns = ['District', \n",
    "                  'Dist_Latitude', \n",
    "                  'Dist_Longitude', \n",
    "                  'Venue', \n",
    "                  'Venue_Lat', \n",
    "                  'Venue_Long', \n",
    "                  'Venue_Category']\n",
    "    \n",
    "    return(nearby_venues)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use the getNearbyVenuesfunction on each neighborhood to Create the Dataframe of Venues Around Those 15 areas in Oslo\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alna\n",
      "Bjerke\n",
      "Frogner\n",
      "Gamle Oslo\n",
      "Grorud\n",
      "Grünerløkka\n",
      "Nordre Aker\n",
      "Nordstrand\n",
      "Sagene\n",
      "St. Hanshaugen\n",
      "Stovner\n",
      "Søndre Nordstrand\n",
      "Ullern\n",
      "Vestre Aker\n",
      "Østensjø\n",
      "Sandvika\n",
      "Shape of the Venues Dataframe:  (564, 7)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>District</th>\n",
       "      <th>Dist_Latitude</th>\n",
       "      <th>Dist_Longitude</th>\n",
       "      <th>Venue</th>\n",
       "      <th>Venue_Lat</th>\n",
       "      <th>Venue_Long</th>\n",
       "      <th>Venue_Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>561</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>59.890726</td>\n",
       "      <td>10.527743</td>\n",
       "      <td>Lakseberget</td>\n",
       "      <td>59.891921</td>\n",
       "      <td>10.536710</td>\n",
       "      <td>Harbor / Marina</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>562</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>59.890726</td>\n",
       "      <td>10.527743</td>\n",
       "      <td>Bergensbanen</td>\n",
       "      <td>59.894937</td>\n",
       "      <td>10.532205</td>\n",
       "      <td>Moving Target</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>563</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>59.890726</td>\n",
       "      <td>10.527743</td>\n",
       "      <td>Bærum Roklubb</td>\n",
       "      <td>59.885958</td>\n",
       "      <td>10.535703</td>\n",
       "      <td>Harbor / Marina</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     District  Dist_Latitude  Dist_Longitude          Venue  Venue_Lat  \\\n",
       "561  Sandvika      59.890726       10.527743    Lakseberget  59.891921   \n",
       "562  Sandvika      59.890726       10.527743   Bergensbanen  59.894937   \n",
       "563  Sandvika      59.890726       10.527743  Bærum Roklubb  59.885958   \n",
       "\n",
       "     Venue_Long   Venue_Category  \n",
       "561   10.536710  Harbor / Marina  \n",
       "562   10.532205    Moving Target  \n",
       "563   10.535703  Harbor / Marina  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reasign the name of the main dataframe for clarity. \n",
    "df_Oslo=df_district\n",
    "#Create new dataframe of venues\n",
    "Oslo_Venues = getNearbyVenues(names=df_Oslo['Borough'],\n",
    "                                   latitudes=df_Oslo['Latitude'],\n",
    "                                   longitudes=df_Oslo['Longitude']\n",
    "                                  )\n",
    "print (\"Shape of the Venues Dataframe: \", Oslo_Venues.shape)\n",
    "Oslo_Venues.tail(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Count venues by district"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>District</th>\n",
       "      <th>Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Alna</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Gamle Oslo</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Grünerløkka</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Nordre Aker</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Nordstrand</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Sagene</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>St. Hanshaugen</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Stovner</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>Søndre Nordstrand</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Ullern</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>Vestre Aker</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>Østensjø</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             District  Venue\n",
       "0                Alna     23\n",
       "1              Bjerke     11\n",
       "2             Frogner    100\n",
       "3          Gamle Oslo     26\n",
       "4              Grorud      9\n",
       "5         Grünerløkka     75\n",
       "6         Nordre Aker     21\n",
       "7          Nordstrand      3\n",
       "8              Sagene     83\n",
       "9            Sandvika     31\n",
       "10     St. Hanshaugen    100\n",
       "11            Stovner      5\n",
       "12  Søndre Nordstrand     11\n",
       "13             Ullern     21\n",
       "14        Vestre Aker     27\n",
       "15           Østensjø     18"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Counting how many venues by district\n",
    "Oslo_Venues_count = Oslo_Venues.groupby('District').count().reset_index()\n",
    "Oslo_Venues_count[['District', 'Venue']]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let’s find out how many unique categories can be curated from all the returned venues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 147 unique categories.\n",
      "       Venue_Category\n",
      "70  French Restaurant\n",
      "71     Boarding House\n",
      "72  Indian Restaurant\n",
      "73        Pizza Place\n",
      "74              Hotel\n"
     ]
    }
   ],
   "source": [
    "\n",
    "### Number of Unique Categories in the Dataframe \n",
    "print('There are {} unique categories.'.format(len(Oslo_Venues['Venue_Category'].unique())))\n",
    "## We can check some of the categories randomly  \n",
    "print (Oslo_Venues[['Venue_Category']][70:75])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Café                   38\n",
      "Grocery Store          37\n",
      "Bakery                 26\n",
      "Coffee Shop            24\n",
      "Pizza Place            17\n",
      "                       ..\n",
      "Health Food Store       1\n",
      "Fried Chicken Joint     1\n",
      "Food Court              1\n",
      "Automotive Shop         1\n",
      "Flower Shop             1\n",
      "Name: Venue_Category, Length: 147, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print (Oslo_Venues['Venue_Category'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.5: Analyze Each District and manipulate data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### We first convert Venue Category variable into dummy variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>District</th>\n",
       "      <th>Advertising Agency</th>\n",
       "      <th>Art Museum</th>\n",
       "      <th>Arts &amp; Crafts Store</th>\n",
       "      <th>Asian Restaurant</th>\n",
       "      <th>Athletics &amp; Sports</th>\n",
       "      <th>Auto Workshop</th>\n",
       "      <th>Automotive Shop</th>\n",
       "      <th>BBQ Joint</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>...</th>\n",
       "      <th>Toy / Game Store</th>\n",
       "      <th>Trail</th>\n",
       "      <th>Train Station</th>\n",
       "      <th>Tram Station</th>\n",
       "      <th>Vegetarian / Vegan Restaurant</th>\n",
       "      <th>Vietnamese Restaurant</th>\n",
       "      <th>Water Park</th>\n",
       "      <th>Wine Bar</th>\n",
       "      <th>Wine Shop</th>\n",
       "      <th>Yoga Studio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>559</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>560</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>561</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>562</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>563</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 148 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     District  Advertising Agency  Art Museum  Arts & Crafts Store  \\\n",
       "559  Sandvika                   0           0                    0   \n",
       "560  Sandvika                   0           0                    0   \n",
       "561  Sandvika                   0           0                    0   \n",
       "562  Sandvika                   0           0                    0   \n",
       "563  Sandvika                   0           0                    0   \n",
       "\n",
       "     Asian Restaurant  Athletics & Sports  Auto Workshop  Automotive Shop  \\\n",
       "559                 0                   0              0                0   \n",
       "560                 0                   0              0                0   \n",
       "561                 0                   0              0                0   \n",
       "562                 0                   0              0                0   \n",
       "563                 0                   0              0                0   \n",
       "\n",
       "     BBQ Joint  Bakery  ...  Toy / Game Store  Trail  Train Station  \\\n",
       "559          0       0  ...                 0      0              0   \n",
       "560          0       0  ...                 0      0              0   \n",
       "561          0       0  ...                 0      0              0   \n",
       "562          0       0  ...                 0      0              0   \n",
       "563          0       0  ...                 0      0              0   \n",
       "\n",
       "     Tram Station  Vegetarian / Vegan Restaurant  Vietnamese Restaurant  \\\n",
       "559             0                              0                      0   \n",
       "560             0                              0                      0   \n",
       "561             0                              0                      0   \n",
       "562             0                              0                      0   \n",
       "563             0                              0                      0   \n",
       "\n",
       "     Water Park  Wine Bar  Wine Shop  Yoga Studio  \n",
       "559           0         0          0            0  \n",
       "560           0         0          0            0  \n",
       "561           0         0          0            0  \n",
       "562           0         0          0            0  \n",
       "563           0         0          0            0  \n",
       "\n",
       "[5 rows x 148 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Use One Hot Encoding to Get More Information about the Venue Categories \n",
    "Oslo_Venues_onehot = pd.get_dummies(Oslo_Venues[['Venue_Category']], prefix=\"\", prefix_sep=\"\")\n",
    "\n",
    "### add district column back to dataframe\n",
    "Oslo_Venues_onehot['District'] = Oslo_Venues['District'] \n",
    "### move district column to the first column\n",
    "fixed_columns = [Oslo_Venues_onehot.columns[-1]] + list(Oslo_Venues_onehot.columns[:-1])\n",
    "Oslo_Venues_onehot = Oslo_Venues_onehot[fixed_columns]\n",
    "###Oslo_Venues_onehot.head(3)\n",
    "Oslo_Venues_onehot.tail(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Group rows by neighborhood and by taking the mean of the frequency of occurrence of each Venue Category."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>District</th>\n",
       "      <th>Advertising Agency</th>\n",
       "      <th>Art Museum</th>\n",
       "      <th>Arts &amp; Crafts Store</th>\n",
       "      <th>Asian Restaurant</th>\n",
       "      <th>Athletics &amp; Sports</th>\n",
       "      <th>Auto Workshop</th>\n",
       "      <th>Automotive Shop</th>\n",
       "      <th>BBQ Joint</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>...</th>\n",
       "      <th>Toy / Game Store</th>\n",
       "      <th>Trail</th>\n",
       "      <th>Train Station</th>\n",
       "      <th>Tram Station</th>\n",
       "      <th>Vegetarian / Vegan Restaurant</th>\n",
       "      <th>Vietnamese Restaurant</th>\n",
       "      <th>Water Park</th>\n",
       "      <th>Wine Bar</th>\n",
       "      <th>Wine Shop</th>\n",
       "      <th>Yoga Studio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Alna</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>...</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.030000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.070000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Gamle Oslo</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 148 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     District  Advertising Agency  Art Museum  Arts & Crafts Store  \\\n",
       "1        Alna                 0.0        0.00             0.043478   \n",
       "2      Bjerke                 0.0        0.00             0.000000   \n",
       "3     Frogner                 0.0        0.01             0.000000   \n",
       "4  Gamle Oslo                 0.0        0.00             0.000000   \n",
       "5      Grorud                 0.0        0.00             0.000000   \n",
       "\n",
       "   Asian Restaurant  Athletics & Sports  Auto Workshop  Automotive Shop  \\\n",
       "1          0.000000            0.000000       0.043478         0.043478   \n",
       "2          0.000000            0.000000       0.000000         0.000000   \n",
       "3          0.030000            0.000000       0.000000         0.000000   \n",
       "4          0.000000            0.000000       0.000000         0.000000   \n",
       "5          0.111111            0.111111       0.000000         0.000000   \n",
       "\n",
       "   BBQ Joint    Bakery  ...  Toy / Game Store  Trail  Train Station  \\\n",
       "1        0.0  0.043478  ...          0.043478    0.0            0.0   \n",
       "2        0.0  0.000000  ...          0.000000    0.0            0.0   \n",
       "3        0.0  0.070000  ...          0.000000    0.0            0.0   \n",
       "4        0.0  0.000000  ...          0.000000    0.0            0.0   \n",
       "5        0.0  0.000000  ...          0.000000    0.0            0.0   \n",
       "\n",
       "   Tram Station  Vegetarian / Vegan Restaurant  Vietnamese Restaurant  \\\n",
       "1           0.0                           0.00                    0.0   \n",
       "2           0.0                           0.00                    0.0   \n",
       "3           0.0                           0.01                    0.0   \n",
       "4           0.0                           0.00                    0.0   \n",
       "5           0.0                           0.00                    0.0   \n",
       "\n",
       "   Water Park  Wine Bar  Wine Shop  Yoga Studio  \n",
       "1        0.00       0.0       0.00         0.00  \n",
       "2        0.00       0.0       0.00         0.00  \n",
       "3        0.01       0.0       0.03         0.01  \n",
       "4        0.00       0.0       0.00         0.00  \n",
       "5        0.00       0.0       0.00         0.00  \n",
       "\n",
       "[5 rows x 148 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Oslo_Venues_Grouped = Oslo_Venues_onehot.groupby('District').mean().reset_index()\n",
    "Oslo_Venues_Grouped.index = np.arange(1, len(Oslo_Venues_Grouped)+1)\n",
    "Oslo_Venues_Grouped.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "%%%%%%%%%Alna%%%%%%%%\n",
      "                    Venue  Freq\n",
      "0           Grocery Store  0.13\n",
      "1           Metro Station  0.13\n",
      "2  Furniture / Home Store  0.13\n",
      "3             Bus Station  0.09\n",
      "4       Electronics Store  0.04\n",
      "\n",
      "\n",
      "%%%%%%%%%Bjerke%%%%%%%%\n",
      "                  Venue  Freq\n",
      "0         Grocery Store  0.27\n",
      "1                  Café  0.18\n",
      "2                 Hotel  0.09\n",
      "3  Fast Food Restaurant  0.09\n",
      "4           Supermarket  0.09\n",
      "\n",
      "\n",
      "%%%%%%%%%Frogner%%%%%%%%\n",
      "                     Venue  Freq\n",
      "0                     Café  0.09\n",
      "1                   Bakery  0.07\n",
      "2              Coffee Shop  0.05\n",
      "3        Indian Restaurant  0.04\n",
      "4  Scandinavian Restaurant  0.04\n",
      "\n",
      "\n",
      "%%%%%%%%%Gamle Oslo%%%%%%%%\n",
      "                     Venue  Freq\n",
      "0            Boat or Ferry  0.31\n",
      "1  Scandinavian Restaurant  0.08\n",
      "2                     Pier  0.08\n",
      "3                   Castle  0.08\n",
      "4                    Beach  0.04\n",
      "\n",
      "\n",
      "%%%%%%%%%Grorud%%%%%%%%\n",
      "           Venue  Freq\n",
      "0    Supermarket  0.11\n",
      "1  Metro Station  0.11\n",
      "2    Bus Station  0.11\n",
      "3  Grocery Store  0.11\n",
      "4            Gym  0.11\n",
      "\n",
      "\n",
      "%%%%%%%%%Grünerløkka%%%%%%%%\n",
      "              Venue  Freq\n",
      "0     Grocery Store  0.12\n",
      "1              Café  0.08\n",
      "2       Coffee Shop  0.05\n",
      "3  Botanical Garden  0.04\n",
      "4              Park  0.04\n",
      "\n",
      "\n",
      "%%%%%%%%%Nordre Aker%%%%%%%%\n",
      "                Venue  Freq\n",
      "0         Bus Station  0.10\n",
      "1       Shopping Mall  0.10\n",
      "2              Bakery  0.10\n",
      "3                 Gym  0.10\n",
      "4  Advertising Agency  0.05\n",
      "\n",
      "\n",
      "%%%%%%%%%Nordstrand%%%%%%%%\n",
      "                Venue  Freq\n",
      "0               Hotel  0.33\n",
      "1                Bank  0.33\n",
      "2         Supermarket  0.33\n",
      "3  Italian Restaurant  0.00\n",
      "4         Pizza Place  0.00\n",
      "\n",
      "\n",
      "%%%%%%%%%Sagene%%%%%%%%\n",
      "              Venue  Freq\n",
      "0              Café  0.08\n",
      "1  Sushi Restaurant  0.08\n",
      "2              Park  0.07\n",
      "3       Coffee Shop  0.06\n",
      "4     Grocery Store  0.06\n",
      "\n",
      "\n",
      "%%%%%%%%%Sandvika%%%%%%%%\n",
      "               Venue  Freq\n",
      "0               Café  0.10\n",
      "1        Coffee Shop  0.10\n",
      "2         Restaurant  0.06\n",
      "3    Harbor / Marina  0.06\n",
      "4  Electronics Store  0.06\n",
      "\n",
      "\n",
      "%%%%%%%%%St. Hanshaugen%%%%%%%%\n",
      "                     Venue  Freq\n",
      "0                   Bakery  0.09\n",
      "1                     Café  0.08\n",
      "2                     Park  0.05\n",
      "3              Pizza Place  0.05\n",
      "4  Scandinavian Restaurant  0.05\n",
      "\n",
      "\n",
      "%%%%%%%%%Stovner%%%%%%%%\n",
      "              Venue  Freq\n",
      "0  Department Store   0.2\n",
      "1       Gas Station   0.2\n",
      "2     Shopping Mall   0.2\n",
      "3       Golf Course   0.2\n",
      "4     Grocery Store   0.2\n",
      "\n",
      "\n",
      "%%%%%%%%%Søndre Nordstrand%%%%%%%%\n",
      "                  Venue  Freq\n",
      "0         Grocery Store  0.36\n",
      "1         Shopping Mall  0.18\n",
      "2               Stadium  0.09\n",
      "3                   Gym  0.09\n",
      "4  Fast Food Restaurant  0.09\n",
      "\n",
      "\n",
      "%%%%%%%%%Ullern%%%%%%%%\n",
      "                Venue  Freq\n",
      "0         Bus Station  0.14\n",
      "1  Light Rail Station  0.10\n",
      "2       Metro Station  0.10\n",
      "3              Market  0.10\n",
      "4     Harbor / Marina  0.10\n",
      "\n",
      "\n",
      "%%%%%%%%%Vestre Aker%%%%%%%%\n",
      "           Venue  Freq\n",
      "0  Grocery Store  0.15\n",
      "1       Ski Area  0.15\n",
      "2  Metro Station  0.07\n",
      "3     Restaurant  0.07\n",
      "4   Soccer Field  0.07\n",
      "\n",
      "\n",
      "%%%%%%%%%Østensjø%%%%%%%%\n",
      "                Venue  Freq\n",
      "0       Metro Station  0.17\n",
      "1  Athletics & Sports  0.11\n",
      "2       Shopping Mall  0.11\n",
      "3         Yoga Studio  0.06\n",
      "4    Basketball Court  0.06\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "num_top_venues = 5\n",
    "\n",
    "for places in Oslo_Venues_Grouped['District']:\n",
    "    print(\"%%%%%%%%%\"+places+\"%%%%%%%%\")\n",
    "    temp = Oslo_Venues_Grouped[Oslo_Venues_Grouped['District'] == places].T.reset_index()\n",
    "    temp.columns = ['Venue','Freq']\n",
    "    temp = temp.iloc[1:]\n",
    "    temp['Freq'] = temp['Freq'].astype(float)\n",
    "    temp = temp.round({'Freq': 2})\n",
    "    print(temp.sort_values('Freq', ascending=False).reset_index(drop=True).head(num_top_venues))\n",
    "    print('\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create a DataFrame with Top 10 Venues for Each District\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>District</th>\n",
       "      <th>1st Most Common Venue</th>\n",
       "      <th>2nd Most Common Venue</th>\n",
       "      <th>3rd Most Common Venue</th>\n",
       "      <th>4th Most Common Venue</th>\n",
       "      <th>5th Most Common Venue</th>\n",
       "      <th>6th Most Common Venue</th>\n",
       "      <th>7th Most Common Venue</th>\n",
       "      <th>8th Most Common Venue</th>\n",
       "      <th>9th Most Common Venue</th>\n",
       "      <th>10th Most Common Venue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Alna</td>\n",
       "      <td>Furniture / Home Store</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>Metro Station</td>\n",
       "      <td>Bus Station</td>\n",
       "      <td>Pet Store</td>\n",
       "      <td>Electronics Store</td>\n",
       "      <td>Bookstore</td>\n",
       "      <td>Spanish Restaurant</td>\n",
       "      <td>Market</td>\n",
       "      <td>Kids Store</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>Café</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>Supermarket</td>\n",
       "      <td>Farm</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Fast Food Restaurant</td>\n",
       "      <td>Gym / Fitness Center</td>\n",
       "      <td>Diner</td>\n",
       "      <td>Dessert Shop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>Café</td>\n",
       "      <td>Bakery</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>Hotel</td>\n",
       "      <td>Indian Restaurant</td>\n",
       "      <td>Scandinavian Restaurant</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>Pub</td>\n",
       "      <td>Wine Shop</td>\n",
       "      <td>Pizza Place</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Gamle Oslo</td>\n",
       "      <td>Boat or Ferry</td>\n",
       "      <td>Scandinavian Restaurant</td>\n",
       "      <td>Pier</td>\n",
       "      <td>Castle</td>\n",
       "      <td>History Museum</td>\n",
       "      <td>Beach</td>\n",
       "      <td>Bay</td>\n",
       "      <td>Bathing Area</td>\n",
       "      <td>Burger Joint</td>\n",
       "      <td>Mexican Restaurant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>Optical Shop</td>\n",
       "      <td>Asian Restaurant</td>\n",
       "      <td>Athletics &amp; Sports</td>\n",
       "      <td>Bus Station</td>\n",
       "      <td>Pizza Place</td>\n",
       "      <td>Gym</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>Supermarket</td>\n",
       "      <td>Metro Station</td>\n",
       "      <td>Yoga Studio</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     District   1st Most Common Venue    2nd Most Common Venue  \\\n",
       "1        Alna  Furniture / Home Store            Grocery Store   \n",
       "2      Bjerke           Grocery Store                     Café   \n",
       "3     Frogner                    Café                   Bakery   \n",
       "4  Gamle Oslo           Boat or Ferry  Scandinavian Restaurant   \n",
       "5      Grorud            Optical Shop         Asian Restaurant   \n",
       "\n",
       "  3rd Most Common Venue 4th Most Common Venue 5th Most Common Venue  \\\n",
       "1         Metro Station           Bus Station             Pet Store   \n",
       "2                 Hotel           Supermarket                  Farm   \n",
       "3           Coffee Shop                 Hotel     Indian Restaurant   \n",
       "4                  Pier                Castle        History Museum   \n",
       "5    Athletics & Sports           Bus Station           Pizza Place   \n",
       "\n",
       "     6th Most Common Venue 7th Most Common Venue 8th Most Common Venue  \\\n",
       "1        Electronics Store             Bookstore    Spanish Restaurant   \n",
       "2              Pizza Place  Fast Food Restaurant  Gym / Fitness Center   \n",
       "3  Scandinavian Restaurant         Grocery Store                   Pub   \n",
       "4                    Beach                   Bay          Bathing Area   \n",
       "5                      Gym         Grocery Store           Supermarket   \n",
       "\n",
       "  9th Most Common Venue 10th Most Common Venue  \n",
       "1                Market             Kids Store  \n",
       "2                 Diner           Dessert Shop  \n",
       "3             Wine Shop            Pizza Place  \n",
       "4          Burger Joint     Mexican Restaurant  \n",
       "5         Metro Station            Yoga Studio  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Define a Function to select the top 10 rows (According to the Values) \n",
    "\n",
    "def return_most_common_venues(row, num_top_venues):\n",
    "    row_categories = row.iloc[1:]\n",
    "    row_categories_sorted = row_categories.sort_values(ascending=False)\n",
    "    \n",
    "    return row_categories_sorted.index.values[0:num_top_venues]\n",
    "\n",
    "num_top_venues = 10\n",
    "\n",
    "indicators = ['st', 'nd', 'rd']\n",
    "\n",
    "# create columns according to number of top venues\n",
    "columns = ['District']\n",
    "for ind in np.arange(num_top_venues):\n",
    "    try:\n",
    "        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n",
    "    except:\n",
    "        columns.append('{}th Most Common Venue'.format(ind+1))\n",
    "\n",
    "# create a new dataframe\n",
    "District_top10_venues_sorted = pd.DataFrame(columns=columns)\n",
    "District_top10_venues_sorted['District'] = Oslo_Venues_Grouped['District']\n",
    "\n",
    "for ind in np.arange(Oslo_Venues_Grouped.shape[0]):\n",
    "    District_top10_venues_sorted.iloc[ind, 1:] = return_most_common_venues(Oslo_Venues_Grouped.iloc[ind, :], num_top_venues)\n",
    "\n",
    "    \n",
    "District_top10_venues_sorted.index = np.arange(1, len(District_top10_venues_sorted)+1)\n",
    "District_top10_venues_sorted.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.6: Cluster Neighborhoods"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Clustering the Oslo Districts (Neighborhoods) using K-Means"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Focus only on groceries, suppermarkets.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['District',\n",
       " 'Advertising Agency',\n",
       " 'Art Museum',\n",
       " 'Arts & Crafts Store',\n",
       " 'Asian Restaurant',\n",
       " 'Athletics & Sports',\n",
       " 'Auto Workshop',\n",
       " 'Automotive Shop',\n",
       " 'BBQ Joint',\n",
       " 'Bakery',\n",
       " 'Bank',\n",
       " 'Bar',\n",
       " 'Basketball Court',\n",
       " 'Bathing Area',\n",
       " 'Bay',\n",
       " 'Beach',\n",
       " 'Beer Bar',\n",
       " 'Beer Garden',\n",
       " 'Beer Store',\n",
       " 'Boarding House',\n",
       " 'Boat or Ferry',\n",
       " 'Bookstore',\n",
       " 'Botanical Garden',\n",
       " 'Breakfast Spot',\n",
       " 'Brewery',\n",
       " 'Burger Joint',\n",
       " 'Bus Station',\n",
       " 'Butcher',\n",
       " 'Café',\n",
       " 'Castle',\n",
       " 'Chinese Restaurant',\n",
       " 'Climbing Gym',\n",
       " 'Clothing Store',\n",
       " 'Cocktail Bar',\n",
       " 'Coffee Shop',\n",
       " 'Comfort Food Restaurant',\n",
       " 'Community Center',\n",
       " 'Concert Hall',\n",
       " 'Convenience Store',\n",
       " 'Creperie',\n",
       " 'Deli / Bodega',\n",
       " 'Department Store',\n",
       " 'Dessert Shop',\n",
       " 'Diner',\n",
       " 'Disc Golf',\n",
       " 'Dog Run',\n",
       " 'Eastern European Restaurant',\n",
       " 'Electronics Store',\n",
       " 'Falafel Restaurant',\n",
       " 'Farm',\n",
       " 'Farmers Market',\n",
       " 'Fast Food Restaurant',\n",
       " 'Fish Market',\n",
       " 'Flower Shop',\n",
       " 'Food Court',\n",
       " 'French Restaurant',\n",
       " 'Fried Chicken Joint',\n",
       " 'Furniture / Home Store',\n",
       " 'Garden',\n",
       " 'Gas Station',\n",
       " 'Gastropub',\n",
       " 'Gluten-free Restaurant',\n",
       " 'Golf Course',\n",
       " 'Gourmet Shop',\n",
       " 'Grocery Store',\n",
       " 'Gym',\n",
       " 'Gym / Fitness Center',\n",
       " 'Gym Pool',\n",
       " 'Harbor / Marina',\n",
       " 'Health Food Store',\n",
       " 'Historic Site',\n",
       " 'History Museum',\n",
       " 'Hostel',\n",
       " 'Hot Dog Joint',\n",
       " 'Hotel',\n",
       " 'Hungarian Restaurant',\n",
       " 'Ice Cream Shop',\n",
       " 'Indian Restaurant',\n",
       " 'Italian Restaurant',\n",
       " 'Japanese Restaurant',\n",
       " 'Juice Bar',\n",
       " 'Kids Store',\n",
       " 'Lake',\n",
       " 'Light Rail Station',\n",
       " 'Market',\n",
       " 'Metro Station',\n",
       " 'Mexican Restaurant',\n",
       " 'Middle Eastern Restaurant',\n",
       " 'Movie Theater',\n",
       " 'Moving Target',\n",
       " 'Multiplex',\n",
       " 'Museum',\n",
       " 'Music Venue',\n",
       " 'Noodle House',\n",
       " 'Optical Shop',\n",
       " 'Other Great Outdoors',\n",
       " 'Other Nightlife',\n",
       " 'Park',\n",
       " 'Performing Arts Venue',\n",
       " 'Pet Store',\n",
       " 'Pharmacy',\n",
       " 'Pier',\n",
       " 'Pizza Place',\n",
       " 'Playground',\n",
       " 'Plaza',\n",
       " 'Pub',\n",
       " 'Public Art',\n",
       " 'Rafting',\n",
       " 'Restaurant',\n",
       " 'River',\n",
       " 'Salad Place',\n",
       " 'Sandwich Place',\n",
       " 'Scandinavian Restaurant',\n",
       " 'Science Museum',\n",
       " 'Sculpture Garden',\n",
       " 'Seafood Restaurant',\n",
       " 'Shoe Store',\n",
       " 'Shopping Mall',\n",
       " 'Skate Park',\n",
       " 'Skating Rink',\n",
       " 'Ski Area',\n",
       " 'Smoothie Shop',\n",
       " 'Soccer Field',\n",
       " 'Soccer Stadium',\n",
       " 'Soup Place',\n",
       " 'Spanish Restaurant',\n",
       " 'Sporting Goods Shop',\n",
       " 'Sports Bar',\n",
       " 'Stadium',\n",
       " 'Steakhouse',\n",
       " 'Supermarket',\n",
       " 'Sushi Restaurant',\n",
       " 'Tapas Restaurant',\n",
       " 'Tennis Court',\n",
       " 'Thai Restaurant',\n",
       " 'Theater',\n",
       " 'Theme Park',\n",
       " 'Theme Park Ride / Attraction',\n",
       " 'Toy / Game Store',\n",
       " 'Trail',\n",
       " 'Train Station',\n",
       " 'Tram Station',\n",
       " 'Vegetarian / Vegan Restaurant',\n",
       " 'Vietnamese Restaurant',\n",
       " 'Water Park',\n",
       " 'Wine Bar',\n",
       " 'Wine Shop',\n",
       " 'Yoga Studio']"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## WE are going to see the unique categories to choose those more relevant  to residential areas ex. supermarkets etc\n",
    "## WE show the list of categories  to choose the more relevant\n",
    "list(Oslo_Venues_Grouped)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>District</th>\n",
       "      <th>Playground</th>\n",
       "      <th>Park</th>\n",
       "      <th>Market</th>\n",
       "      <th>Grocery Store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Bank</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>Café</th>\n",
       "      <th>Coffee Shop</th>\n",
       "      <th>Bus Station</th>\n",
       "      <th>Boat or Ferry</th>\n",
       "      <th>Metro Station</th>\n",
       "      <th>Train Station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Alna</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.130435</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.086957</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.130435</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.030000</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.070000</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Gamle Oslo</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.038462</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.307692</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     District  Playground  Park    Market  Grocery Store  Supermarket  Bank  \\\n",
       "1        Alna        0.00  0.00  0.043478       0.130435     0.000000   0.0   \n",
       "2      Bjerke        0.00  0.00  0.000000       0.272727     0.090909   0.0   \n",
       "3     Frogner        0.01  0.03  0.000000       0.030000     0.020000   0.0   \n",
       "4  Gamle Oslo        0.00  0.00  0.000000       0.000000     0.000000   0.0   \n",
       "5      Grorud        0.00  0.00  0.000000       0.111111     0.111111   0.0   \n",
       "\n",
       "     Bakery      Café  Coffee Shop  Bus Station  Boat or Ferry  Metro Station  \\\n",
       "1  0.043478  0.000000         0.00     0.086957       0.000000       0.130435   \n",
       "2  0.000000  0.181818         0.00     0.000000       0.000000       0.000000   \n",
       "3  0.070000  0.090000         0.05     0.000000       0.000000       0.000000   \n",
       "4  0.000000  0.038462         0.00     0.000000       0.307692       0.000000   \n",
       "5  0.000000  0.000000         0.00     0.111111       0.000000       0.111111   \n",
       "\n",
       "   Train Station  \n",
       "1            0.0  \n",
       "2            0.0  \n",
       "3            0.0  \n",
       "4            0.0  \n",
       "5            0.0  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# WE choose  relevant categories typical of residential areas\n",
    "Oslo_grouped_living = Oslo_Venues_Grouped[[\"District\", \"Playground\",\"Park\",\"Market\",\"Grocery Store\",\"Supermarket\",\"Bank\",\"Bakery\",\"Café\",\"Coffee Shop\",'Bus Station','Boat or Ferry','Metro Station','Train Station',]]\n",
    "Oslo_grouped_living.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Identify the optimal number of clusters\n",
    "# try with 10 different values of k to find the best one\n",
    "# find the distances\n",
    "from scipy.spatial.distance import cdist\n",
    "Ks = 10\n",
    "distortions = []\n",
    "\n",
    "Oslo_clustering = Oslo_grouped_living.drop('District', 1)\n",
    "\n",
    "for k in range(1, Ks):\n",
    "\n",
    "    # run k-means clustering\n",
    "    kmeans = KMeans(n_clusters=k, random_state=0).fit(Oslo_clustering)\n",
    "\n",
    "    # find the distortion w.r.t each k\n",
    "    distortions.append(\n",
    "        sum(np.min(cdist(Oslo_clustering, kmeans.cluster_centers_, 'euclidean'), axis=1))\n",
    "        / Oslo_clustering.shape[0]\n",
    "    )\n",
    "\n",
    "plt.plot(range(1, Ks), distortions, 'bx-')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('Distortion')\n",
    "plt.title('The Elbow Method showing the optimal k')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The result is not very clear as we can choose either 2 or 5. We will use k=5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Check the  4Cluster labels : [4 1 0 3 4 0 4 2 0 0 0 1 1 4]\n"
     ]
    }
   ],
   "source": [
    "# set number of clusters\n",
    "kclusters = 5\n",
    "\n",
    "Oslo_clustering = Oslo_grouped_living.drop('District', 1)\n",
    "\n",
    "# run k-means clustering\n",
    "kmeans = KMeans(n_clusters=kclusters, random_state=0).fit(Oslo_clustering)\n",
    "\n",
    "# check cluster labels generated for each row in the dataframe\n",
    "print (\"Check the  4Cluster labels :\",  kmeans.labels_[0:14])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster Labels</th>\n",
       "      <th>District</th>\n",
       "      <th>Playground</th>\n",
       "      <th>Park</th>\n",
       "      <th>Market</th>\n",
       "      <th>Grocery Store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Bank</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>Café</th>\n",
       "      <th>Coffee Shop</th>\n",
       "      <th>Bus Station</th>\n",
       "      <th>Boat or Ferry</th>\n",
       "      <th>Metro Station</th>\n",
       "      <th>Train Station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Alna</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.130435</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.086957</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.130435</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.030000</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.070000</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>Gamle Oslo</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.038462</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.307692</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cluster Labels    District  Playground  Park    Market  Grocery Store  \\\n",
       "1               4        Alna        0.00  0.00  0.043478       0.130435   \n",
       "2               1      Bjerke        0.00  0.00  0.000000       0.272727   \n",
       "3               0     Frogner        0.01  0.03  0.000000       0.030000   \n",
       "4               3  Gamle Oslo        0.00  0.00  0.000000       0.000000   \n",
       "5               4      Grorud        0.00  0.00  0.000000       0.111111   \n",
       "\n",
       "   Supermarket  Bank    Bakery      Café  Coffee Shop  Bus Station  \\\n",
       "1     0.000000   0.0  0.043478  0.000000         0.00     0.086957   \n",
       "2     0.090909   0.0  0.000000  0.181818         0.00     0.000000   \n",
       "3     0.020000   0.0  0.070000  0.090000         0.05     0.000000   \n",
       "4     0.000000   0.0  0.000000  0.038462         0.00     0.000000   \n",
       "5     0.111111   0.0  0.000000  0.000000         0.00     0.111111   \n",
       "\n",
       "   Boat or Ferry  Metro Station  Train Station  \n",
       "1       0.000000       0.130435            0.0  \n",
       "2       0.000000       0.000000            0.0  \n",
       "3       0.000000       0.000000            0.0  \n",
       "4       0.307692       0.000000            0.0  \n",
       "5       0.000000       0.111111            0.0  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Oslo_grouped_living.insert(0, 'Cluster Labels', kmeans.labels_)\n",
    "Oslo_grouped_living.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Residents</th>\n",
       "      <th>Number</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Cluster Labels</th>\n",
       "      <th>Playground</th>\n",
       "      <th>Park</th>\n",
       "      <th>Market</th>\n",
       "      <th>Grocery Store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Bank</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>Café</th>\n",
       "      <th>Coffee Shop</th>\n",
       "      <th>Bus Station</th>\n",
       "      <th>Boat or Ferry</th>\n",
       "      <th>Metro Station</th>\n",
       "      <th>Train Station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Alna</td>\n",
       "      <td>49 801</td>\n",
       "      <td>12.0</td>\n",
       "      <td>59.932417</td>\n",
       "      <td>10.835276</td>\n",
       "      <td>4</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.130435</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.086957</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.130435</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>33 422</td>\n",
       "      <td>9.0</td>\n",
       "      <td>59.941395</td>\n",
       "      <td>10.829208</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>59 269</td>\n",
       "      <td>5.0</td>\n",
       "      <td>59.922224</td>\n",
       "      <td>10.706649</td>\n",
       "      <td>0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.030000</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.070000</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Gamle Oslo</td>\n",
       "      <td>58 671</td>\n",
       "      <td>1.0</td>\n",
       "      <td>59.899237</td>\n",
       "      <td>10.734767</td>\n",
       "      <td>3</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.038462</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.307692</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>27 707</td>\n",
       "      <td>10.0</td>\n",
       "      <td>59.961424</td>\n",
       "      <td>10.880549</td>\n",
       "      <td>4</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Borough Residents  Number   Latitude  Longitude  Cluster Labels  \\\n",
       "0        Alna    49 801    12.0  59.932417  10.835276               4   \n",
       "1      Bjerke    33 422     9.0  59.941395  10.829208               1   \n",
       "2     Frogner    59 269     5.0  59.922224  10.706649               0   \n",
       "3  Gamle Oslo    58 671     1.0  59.899237  10.734767               3   \n",
       "4      Grorud    27 707    10.0  59.961424  10.880549               4   \n",
       "\n",
       "   Playground  Park    Market  Grocery Store  Supermarket  Bank    Bakery  \\\n",
       "0        0.00  0.00  0.043478       0.130435     0.000000   0.0  0.043478   \n",
       "1        0.00  0.00  0.000000       0.272727     0.090909   0.0  0.000000   \n",
       "2        0.01  0.03  0.000000       0.030000     0.020000   0.0  0.070000   \n",
       "3        0.00  0.00  0.000000       0.000000     0.000000   0.0  0.000000   \n",
       "4        0.00  0.00  0.000000       0.111111     0.111111   0.0  0.000000   \n",
       "\n",
       "       Café  Coffee Shop  Bus Station  Boat or Ferry  Metro Station  \\\n",
       "0  0.000000         0.00     0.086957       0.000000       0.130435   \n",
       "1  0.181818         0.00     0.000000       0.000000       0.000000   \n",
       "2  0.090000         0.05     0.000000       0.000000       0.000000   \n",
       "3  0.038462         0.00     0.000000       0.307692       0.000000   \n",
       "4  0.000000         0.00     0.111111       0.000000       0.111111   \n",
       "\n",
       "   Train Station  \n",
       "0            0.0  \n",
       "1            0.0  \n",
       "2            0.0  \n",
       "3            0.0  \n",
       "4            0.0  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Adding Cluster Labels and merging dataframe 'most common venues ' with original Oslo districfs dataframe  'districts and coordinates'\n",
    "Oslo_merged = df_Oslo.join(Oslo_grouped_living.set_index('District'), on='Borough')\n",
    "\n",
    "Oslo_merged.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize the clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x1e981852ac8>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create map\n",
    "map_clusters = folium.Map(location=[59.9133301,10.7389701], zoom_start=11)\n",
    "\n",
    "# set color scheme for the clusters\n",
    "x = np.arange(kclusters)\n",
    "ys = [i + x + (i*x)**2 for i in range(kclusters)]\n",
    "colors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\n",
    "rainbow = [colors.rgb2hex(i) for i in colors_array]\n",
    "\n",
    "# add markers to the map\n",
    "markers_colors = []\n",
    "for lat, lon, poi, cluster in zip(Oslo_merged['Latitude'], \n",
    "                                  Oslo_merged['Longitude'], \n",
    "                                  Oslo_merged['Borough'], \n",
    "                                  Oslo_merged['Cluster Labels']):\n",
    "    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n",
    "    folium.CircleMarker(\n",
    "        [lat, lon],\n",
    "        radius=8,\n",
    "        popup=label,\n",
    "        color=rainbow[cluster-1],\n",
    "        fill=True,\n",
    "        fill_color=rainbow[cluster-1],\n",
    "        fill_opacity=0.5).add_to(map_clusters)\n",
    "       \n",
    "map_clusters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Examine Clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Cluster Labels</th>\n",
       "      <th>Playground</th>\n",
       "      <th>Park</th>\n",
       "      <th>Market</th>\n",
       "      <th>Grocery Store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Bank</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>Café</th>\n",
       "      <th>Coffee Shop</th>\n",
       "      <th>Bus Station</th>\n",
       "      <th>Boat or Ferry</th>\n",
       "      <th>Metro Station</th>\n",
       "      <th>Train Station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>10.706649</td>\n",
       "      <td>0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.030000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.030000</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.070000</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Grünerløkka</td>\n",
       "      <td>10.777421</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>0.080000</td>\n",
       "      <td>0.053333</td>\n",
       "      <td>0.026667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Sagene</td>\n",
       "      <td>10.765849</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.072289</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.060241</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.048193</td>\n",
       "      <td>0.084337</td>\n",
       "      <td>0.060241</td>\n",
       "      <td>0.024096</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>St. Hanshaugen</td>\n",
       "      <td>10.738958</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>0.080000</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>Sandvika</td>\n",
       "      <td>10.527743</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.032258</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.096774</td>\n",
       "      <td>0.096774</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.032258</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Borough  Longitude  Cluster Labels  Playground      Park  Market  \\\n",
       "2          Frogner  10.706649               0        0.01  0.030000     0.0   \n",
       "5      Grünerløkka  10.777421               0        0.00  0.040000     0.0   \n",
       "8           Sagene  10.765849               0        0.00  0.072289     0.0   \n",
       "9   St. Hanshaugen  10.738958               0        0.00  0.050000     0.0   \n",
       "15        Sandvika  10.527743               0        0.00  0.000000     0.0   \n",
       "\n",
       "    Grocery Store  Supermarket  Bank    Bakery      Café  Coffee Shop  \\\n",
       "2        0.030000         0.02   0.0  0.070000  0.090000     0.050000   \n",
       "5        0.120000         0.00   0.0  0.040000  0.080000     0.053333   \n",
       "8        0.060241         0.00   0.0  0.048193  0.084337     0.060241   \n",
       "9        0.010000         0.00   0.0  0.090000  0.080000     0.050000   \n",
       "15       0.032258         0.00   0.0  0.000000  0.096774     0.096774   \n",
       "\n",
       "    Bus Station  Boat or Ferry  Metro Station  Train Station  \n",
       "2      0.000000            0.0            0.0       0.000000  \n",
       "5      0.026667            0.0            0.0       0.000000  \n",
       "8      0.024096            0.0            0.0       0.000000  \n",
       "9      0.000000            0.0            0.0       0.000000  \n",
       "15     0.000000            0.0            0.0       0.032258  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster1 = Oslo_merged.loc[Oslo_merged['Cluster Labels'] == 0, Oslo_merged.columns[[0] + list(range(4, Oslo_merged.shape[1]))]]\n",
    "cluster1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Cluster Labels</th>\n",
       "      <th>Playground</th>\n",
       "      <th>Park</th>\n",
       "      <th>Market</th>\n",
       "      <th>Grocery Store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Bank</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>Café</th>\n",
       "      <th>Coffee Shop</th>\n",
       "      <th>Bus Station</th>\n",
       "      <th>Boat or Ferry</th>\n",
       "      <th>Metro Station</th>\n",
       "      <th>Train Station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>10.829208</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>Stovner</td>\n",
       "      <td>10.922823</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Søndre Nordstrand</td>\n",
       "      <td>10.798496</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.363636</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.090909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Vestre Aker</td>\n",
       "      <td>10.670319</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.148148</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.074074</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.074074</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Borough  Longitude  Cluster Labels  Playground  Park  Market  \\\n",
       "1              Bjerke  10.829208               1         0.0   0.0     0.0   \n",
       "10            Stovner  10.922823               1         0.0   0.0     0.0   \n",
       "11  Søndre Nordstrand  10.798496               1         0.0   0.0     0.0   \n",
       "13        Vestre Aker  10.670319               1         0.0   0.0     0.0   \n",
       "\n",
       "    Grocery Store  Supermarket  Bank  Bakery      Café  Coffee Shop  \\\n",
       "1        0.272727     0.090909   0.0     0.0  0.181818          0.0   \n",
       "10       0.200000     0.000000   0.0     0.0  0.000000          0.0   \n",
       "11       0.363636     0.000000   0.0     0.0  0.000000          0.0   \n",
       "13       0.148148     0.000000   0.0     0.0  0.074074          0.0   \n",
       "\n",
       "    Bus Station  Boat or Ferry  Metro Station  Train Station  \n",
       "1           0.0            0.0       0.000000       0.000000  \n",
       "10          0.0            0.0       0.000000       0.000000  \n",
       "11          0.0            0.0       0.000000       0.090909  \n",
       "13          0.0            0.0       0.074074       0.000000  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster2 = Oslo_merged.loc[Oslo_merged['Cluster Labels'] == 1, Oslo_merged.columns[[0] + list(range(4, Oslo_merged.shape[1]))]]\n",
    "cluster2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Cluster Labels</th>\n",
       "      <th>Playground</th>\n",
       "      <th>Park</th>\n",
       "      <th>Market</th>\n",
       "      <th>Grocery Store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Bank</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>Café</th>\n",
       "      <th>Coffee Shop</th>\n",
       "      <th>Bus Station</th>\n",
       "      <th>Boat or Ferry</th>\n",
       "      <th>Metro Station</th>\n",
       "      <th>Train Station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Nordstrand</td>\n",
       "      <td>8.865286</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Borough  Longitude  Cluster Labels  Playground  Park  Market  \\\n",
       "7  Nordstrand   8.865286               2         0.0   0.0     0.0   \n",
       "\n",
       "   Grocery Store  Supermarket      Bank  Bakery  Café  Coffee Shop  \\\n",
       "7            0.0     0.333333  0.333333     0.0   0.0          0.0   \n",
       "\n",
       "   Bus Station  Boat or Ferry  Metro Station  Train Station  \n",
       "7          0.0            0.0            0.0            0.0  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster3 = Oslo_merged.loc[Oslo_merged['Cluster Labels'] == 2, Oslo_merged.columns[[0] + list(range(4, Oslo_merged.shape[1]))]]\n",
    "cluster3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Cluster Labels</th>\n",
       "      <th>Playground</th>\n",
       "      <th>Park</th>\n",
       "      <th>Market</th>\n",
       "      <th>Grocery Store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Bank</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>Café</th>\n",
       "      <th>Coffee Shop</th>\n",
       "      <th>Bus Station</th>\n",
       "      <th>Boat or Ferry</th>\n",
       "      <th>Metro Station</th>\n",
       "      <th>Train Station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Gamle Oslo</td>\n",
       "      <td>10.734767</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.038462</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.307692</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Borough  Longitude  Cluster Labels  Playground  Park  Market  \\\n",
       "3  Gamle Oslo  10.734767               3         0.0   0.0     0.0   \n",
       "\n",
       "   Grocery Store  Supermarket  Bank  Bakery      Café  Coffee Shop  \\\n",
       "3            0.0          0.0   0.0     0.0  0.038462          0.0   \n",
       "\n",
       "   Bus Station  Boat or Ferry  Metro Station  Train Station  \n",
       "3          0.0       0.307692            0.0            0.0  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster4 = Oslo_merged.loc[Oslo_merged['Cluster Labels'] == 3, Oslo_merged.columns[[0] + list(range(4, Oslo_merged.shape[1]))]]\n",
    "cluster4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Cluster Labels</th>\n",
       "      <th>Playground</th>\n",
       "      <th>Park</th>\n",
       "      <th>Market</th>\n",
       "      <th>Grocery Store</th>\n",
       "      <th>Supermarket</th>\n",
       "      <th>Bank</th>\n",
       "      <th>Bakery</th>\n",
       "      <th>Café</th>\n",
       "      <th>Coffee Shop</th>\n",
       "      <th>Bus Station</th>\n",
       "      <th>Boat or Ferry</th>\n",
       "      <th>Metro Station</th>\n",
       "      <th>Train Station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Alna</td>\n",
       "      <td>10.835276</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.130435</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.086957</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.130435</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>10.880549</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Nordre Aker</td>\n",
       "      <td>10.756412</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.047619</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.095238</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.047619</td>\n",
       "      <td>0.095238</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.047619</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>Ullern</td>\n",
       "      <td>10.665132</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.095238</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.047619</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.095238</td>\n",
       "      <td>0.047619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>Østensjø</td>\n",
       "      <td>10.832748</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.055556</td>\n",
       "      <td>0.055556</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Borough  Longitude  Cluster Labels  Playground  Park    Market  \\\n",
       "0          Alna  10.835276               4         0.0   0.0  0.043478   \n",
       "4        Grorud  10.880549               4         0.0   0.0  0.000000   \n",
       "6   Nordre Aker  10.756412               4         0.0   0.0  0.000000   \n",
       "12       Ullern  10.665132               4         0.0   0.0  0.095238   \n",
       "14     Østensjø  10.832748               4         0.0   0.0  0.000000   \n",
       "\n",
       "    Grocery Store  Supermarket  Bank    Bakery  Café  Coffee Shop  \\\n",
       "0        0.130435     0.000000   0.0  0.043478   0.0     0.000000   \n",
       "4        0.111111     0.111111   0.0  0.000000   0.0     0.000000   \n",
       "6        0.047619     0.000000   0.0  0.095238   0.0     0.047619   \n",
       "12       0.000000     0.000000   0.0  0.000000   0.0     0.047619   \n",
       "14       0.055556     0.055556   0.0  0.000000   0.0     0.000000   \n",
       "\n",
       "    Bus Station  Boat or Ferry  Metro Station  Train Station  \n",
       "0      0.086957            0.0       0.130435       0.000000  \n",
       "4      0.111111            0.0       0.111111       0.000000  \n",
       "6      0.095238            0.0       0.047619       0.000000  \n",
       "12     0.142857            0.0       0.095238       0.047619  \n",
       "14     0.000000            0.0       0.166667       0.000000  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster5 = Oslo_merged.loc[Oslo_merged['Cluster Labels'] == 4, Oslo_merged.columns[[0] + list(range(4, Oslo_merged.shape[1]))]]\n",
    "cluster5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.7 Characterize Districts using Socioeconomic data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Location                                Household Type  \\\n",
      "0  Bærum (Sandvika)                                All households   \n",
      "1  Bærum (Sandvika)                                  Living alone   \n",
      "2  Bærum (Sandvika)              Couple without resident children   \n",
      "3  Bærum (Sandvika)       Couple with resident children 0-17 year   \n",
      "4  Bærum (Sandvika)  Single mother/father with children 0-17 year   \n",
      "5            Gamle                                 All households   \n",
      "6            Gamle                                   Living alone   \n",
      "7            Gamle               Couple without resident children   \n",
      "8            Gamle        Couple with resident children 0-17 year   \n",
      "9            Gamle   Single mother/father with children 0-17 year   \n",
      "\n",
      "   Total income, median (NOK)  Income after taxes, median (NOK)  \\\n",
      "0                      852000                            642000   \n",
      "1                      419000                            325000   \n",
      "2                     1057000                            787000   \n",
      "3                     1515000                           1079000   \n",
      "4                      616000                            484000   \n",
      "5                      562000                            430000   \n",
      "6                      429000                            331000   \n",
      "7                      924000                            699000   \n",
      "8                     1020000                            773000   \n",
      "9                      442000                            384000   \n",
      "\n",
      "   Number of households  Household Type/ Total Households  \n",
      "0                 53900                          1.000000  \n",
      "1                 19797                          0.367291  \n",
      "2                 11913                          0.221020  \n",
      "3                 13919                          0.258237  \n",
      "4                  2415                          0.044805  \n",
      "5                 31312                          1.000000  \n",
      "6                 17990                          0.574540  \n",
      "7                  5830                          0.186191  \n",
      "8                  3991                          0.127459  \n",
      "9                  1311                          0.041869  \n"
     ]
    }
   ],
   "source": [
    "# Import excel file with data\n",
    "my_sheet = 'Summary' \n",
    "file_name = r'C:\\Users\\MyPC\\Desktop\\MOOC\\DATA SCIENCE\\APPLIED DATA SCIENCE CAPSTONE\\Oslo Datasets\\Households and income\\INCOME_HOUSEHOLD.xlsx' \n",
    "df_Oslo1 = pd.read_excel(file_name, sheet_name = my_sheet)\n",
    "print(df_Oslo1.head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Location</th>\n",
       "      <th>Household Type</th>\n",
       "      <th>Total income, median (NOK)</th>\n",
       "      <th>Number of households</th>\n",
       "      <th>Household Type/ Total Households</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Bærum (Sandvika)</td>\n",
       "      <td>All households</td>\n",
       "      <td>852000</td>\n",
       "      <td>53900</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Bærum (Sandvika)</td>\n",
       "      <td>Living alone</td>\n",
       "      <td>419000</td>\n",
       "      <td>19797</td>\n",
       "      <td>0.367291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Bærum (Sandvika)</td>\n",
       "      <td>Couple without resident children</td>\n",
       "      <td>1057000</td>\n",
       "      <td>11913</td>\n",
       "      <td>0.221020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Bærum (Sandvika)</td>\n",
       "      <td>Couple with resident children 0-17 year</td>\n",
       "      <td>1515000</td>\n",
       "      <td>13919</td>\n",
       "      <td>0.258237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Bærum (Sandvika)</td>\n",
       "      <td>Single mother/father with children 0-17 year</td>\n",
       "      <td>616000</td>\n",
       "      <td>2415</td>\n",
       "      <td>0.044805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>80</td>\n",
       "      <td>Sentrum</td>\n",
       "      <td>All households</td>\n",
       "      <td>423000</td>\n",
       "      <td>909</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>81</td>\n",
       "      <td>Sentrum</td>\n",
       "      <td>Living alone</td>\n",
       "      <td>361000</td>\n",
       "      <td>666</td>\n",
       "      <td>0.732673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>82</td>\n",
       "      <td>Sentrum</td>\n",
       "      <td>Couple without resident children</td>\n",
       "      <td>679000</td>\n",
       "      <td>165</td>\n",
       "      <td>0.181518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>83</td>\n",
       "      <td>Sentrum</td>\n",
       "      <td>Couple with resident children 0-17 year</td>\n",
       "      <td>629000</td>\n",
       "      <td>22</td>\n",
       "      <td>0.024202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>84</td>\n",
       "      <td>Sentrum</td>\n",
       "      <td>Single mother/father with children 0-17 year</td>\n",
       "      <td>352000</td>\n",
       "      <td>14</td>\n",
       "      <td>0.015402</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>85 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Location                                Household Type  \\\n",
       "0   Bærum (Sandvika)                                All households   \n",
       "1   Bærum (Sandvika)                                  Living alone   \n",
       "2   Bærum (Sandvika)              Couple without resident children   \n",
       "3   Bærum (Sandvika)       Couple with resident children 0-17 year   \n",
       "4   Bærum (Sandvika)  Single mother/father with children 0-17 year   \n",
       "..               ...                                           ...   \n",
       "80           Sentrum                                All households   \n",
       "81           Sentrum                                  Living alone   \n",
       "82           Sentrum              Couple without resident children   \n",
       "83           Sentrum       Couple with resident children 0-17 year   \n",
       "84           Sentrum  Single mother/father with children 0-17 year   \n",
       "\n",
       "    Total income, median (NOK)  Number of households  \\\n",
       "0                       852000                 53900   \n",
       "1                       419000                 19797   \n",
       "2                      1057000                 11913   \n",
       "3                      1515000                 13919   \n",
       "4                       616000                  2415   \n",
       "..                         ...                   ...   \n",
       "80                      423000                   909   \n",
       "81                      361000                   666   \n",
       "82                      679000                   165   \n",
       "83                      629000                    22   \n",
       "84                      352000                    14   \n",
       "\n",
       "    Household Type/ Total Households  \n",
       "0                           1.000000  \n",
       "1                           0.367291  \n",
       "2                           0.221020  \n",
       "3                           0.258237  \n",
       "4                           0.044805  \n",
       "..                               ...  \n",
       "80                          1.000000  \n",
       "81                          0.732673  \n",
       "82                          0.181518  \n",
       "83                          0.024202  \n",
       "84                          0.015402  \n",
       "\n",
       "[85 rows x 5 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Choose only relevenat columns\n",
    "df_Oslo2=df_Oslo1[[\"Location\",\"Household Type\",\"Total income, median (NOK)\",\"Number of households\",\"Household Type/ Total Households\"]]\n",
    "df_Oslo2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Location</th>\n",
       "      <th>Household Type</th>\n",
       "      <th>Total income, median (NOK)</th>\n",
       "      <th>Number of households</th>\n",
       "      <th>Household Type/ Total Households</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Bærum (Sandvika)</td>\n",
       "      <td>Couple with resident children 0-17 year</td>\n",
       "      <td>1515000</td>\n",
       "      <td>13919</td>\n",
       "      <td>0.258237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Gamle</td>\n",
       "      <td>Couple with resident children 0-17 year</td>\n",
       "      <td>1020000</td>\n",
       "      <td>3991</td>\n",
       "      <td>0.127459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Grunelokka</td>\n",
       "      <td>Couple with resident children 0-17 year</td>\n",
       "      <td>1096000</td>\n",
       "      <td>4115</td>\n",
       "      <td>0.116850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>Sagene</td>\n",
       "      <td>Couple with resident children 0-17 year</td>\n",
       "      <td>1173000</td>\n",
       "      <td>2968</td>\n",
       "      <td>0.116164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23</td>\n",
       "      <td>St. Hanshaugen</td>\n",
       "      <td>Couple with resident children 0-17 year</td>\n",
       "      <td>1259000</td>\n",
       "      <td>2220</td>\n",
       "      <td>0.097471</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Location                           Household Type  \\\n",
       "3   Bærum (Sandvika)  Couple with resident children 0-17 year   \n",
       "8             Gamle   Couple with resident children 0-17 year   \n",
       "13        Grunelokka  Couple with resident children 0-17 year   \n",
       "18            Sagene  Couple with resident children 0-17 year   \n",
       "23    St. Hanshaugen  Couple with resident children 0-17 year   \n",
       "\n",
       "    Total income, median (NOK)  Number of households  \\\n",
       "3                      1515000                 13919   \n",
       "8                      1020000                  3991   \n",
       "13                     1096000                  4115   \n",
       "18                     1173000                  2968   \n",
       "23                     1259000                  2220   \n",
       "\n",
       "    Household Type/ Total Households  \n",
       "3                           0.258237  \n",
       "8                           0.127459  \n",
       "13                          0.116850  \n",
       "18                          0.116164  \n",
       "23                          0.097471  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# WE select only the category we are interested in\n",
    "df_Oslo2 = df_Oslo2.loc[df_Oslo2[\"Household Type\"] == \"Couple with resident children 0-17 year\"]\n",
    "df_Oslo2.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Household Type/ Total Households represents the % of Households in the chosen category\n"
     ]
    }
   ],
   "source": [
    "print(\"Household Type/ Total Households represents the % of Households in the chosen category\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MyPC\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Location</th>\n",
       "      <th>Household Type/ Total Households</th>\n",
       "      <th>Total income, median (NOK)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Bærum (Sandvika)</td>\n",
       "      <td>0.258237</td>\n",
       "      <td>1515000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38</td>\n",
       "      <td>Vestre Aker</td>\n",
       "      <td>0.254991</td>\n",
       "      <td>1747000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>78</td>\n",
       "      <td>Sondre Nordstrand</td>\n",
       "      <td>0.241834</td>\n",
       "      <td>959000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>73</td>\n",
       "      <td>Nordstrand</td>\n",
       "      <td>0.237255</td>\n",
       "      <td>1517000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>43</td>\n",
       "      <td>Nordre Aker</td>\n",
       "      <td>0.235323</td>\n",
       "      <td>1591000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>68</td>\n",
       "      <td>Ostensjo</td>\n",
       "      <td>0.225548</td>\n",
       "      <td>1210000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>48</td>\n",
       "      <td>Bjerke</td>\n",
       "      <td>0.223673</td>\n",
       "      <td>1052000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>33</td>\n",
       "      <td>Ullern</td>\n",
       "      <td>0.219615</td>\n",
       "      <td>1693000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58</td>\n",
       "      <td>Stovner</td>\n",
       "      <td>0.215922</td>\n",
       "      <td>890000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>63</td>\n",
       "      <td>Alna</td>\n",
       "      <td>0.197076</td>\n",
       "      <td>898000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>53</td>\n",
       "      <td>Grorud</td>\n",
       "      <td>0.187529</td>\n",
       "      <td>907000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Gamle</td>\n",
       "      <td>0.127459</td>\n",
       "      <td>1020000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Grunelokka</td>\n",
       "      <td>0.116850</td>\n",
       "      <td>1096000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>Sagene</td>\n",
       "      <td>0.116164</td>\n",
       "      <td>1173000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23</td>\n",
       "      <td>St. Hanshaugen</td>\n",
       "      <td>0.097471</td>\n",
       "      <td>1259000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>28</td>\n",
       "      <td>Frogner</td>\n",
       "      <td>0.093816</td>\n",
       "      <td>1404000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>83</td>\n",
       "      <td>Sentrum</td>\n",
       "      <td>0.024202</td>\n",
       "      <td>629000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Location  Household Type/ Total Households  \\\n",
       "3    Bærum (Sandvika)                          0.258237   \n",
       "38        Vestre Aker                          0.254991   \n",
       "78  Sondre Nordstrand                          0.241834   \n",
       "73         Nordstrand                          0.237255   \n",
       "43        Nordre Aker                          0.235323   \n",
       "68           Ostensjo                          0.225548   \n",
       "48             Bjerke                          0.223673   \n",
       "33             Ullern                          0.219615   \n",
       "58            Stovner                          0.215922   \n",
       "63               Alna                          0.197076   \n",
       "53             Grorud                          0.187529   \n",
       "8              Gamle                           0.127459   \n",
       "13         Grunelokka                          0.116850   \n",
       "18             Sagene                          0.116164   \n",
       "23     St. Hanshaugen                          0.097471   \n",
       "28            Frogner                          0.093816   \n",
       "83            Sentrum                          0.024202   \n",
       "\n",
       "    Total income, median (NOK)  \n",
       "3                      1515000  \n",
       "38                     1747000  \n",
       "78                      959000  \n",
       "73                     1517000  \n",
       "43                     1591000  \n",
       "68                     1210000  \n",
       "48                     1052000  \n",
       "33                     1693000  \n",
       "58                      890000  \n",
       "63                      898000  \n",
       "53                      907000  \n",
       "8                      1020000  \n",
       "13                     1096000  \n",
       "18                     1173000  \n",
       "23                     1259000  \n",
       "28                     1404000  \n",
       "83                      629000  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Select Household type and sort\n",
    "df_Oslo3 = df_Oslo2[['Location',\"Household Type/ Total Households\",'Total income, median (NOK)']]\n",
    "df_Oslo3.sort_values(by=['Household Type/ Total Households'],inplace= True,ascending=False)\n",
    "df_Oslo3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Household Type/ Total Households</th>\n",
       "      <th>Total income, median (NOK)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Location</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Bærum (Sandvika)</td>\n",
       "      <td>0.258237</td>\n",
       "      <td>1515000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Vestre Aker</td>\n",
       "      <td>0.254991</td>\n",
       "      <td>1747000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Sondre Nordstrand</td>\n",
       "      <td>0.241834</td>\n",
       "      <td>959000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Nordstrand</td>\n",
       "      <td>0.237255</td>\n",
       "      <td>1517000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Nordre Aker</td>\n",
       "      <td>0.235323</td>\n",
       "      <td>1591000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Household Type/ Total Households  \\\n",
       "Location                                              \n",
       "Bærum (Sandvika)                           0.258237   \n",
       "Vestre Aker                                0.254991   \n",
       "Sondre Nordstrand                          0.241834   \n",
       "Nordstrand                                 0.237255   \n",
       "Nordre Aker                                0.235323   \n",
       "\n",
       "                   Total income, median (NOK)  \n",
       "Location                                       \n",
       "Bærum (Sandvika)                      1515000  \n",
       "Vestre Aker                           1747000  \n",
       "Sondre Nordstrand                      959000  \n",
       "Nordstrand                            1517000  \n",
       "Nordre Aker                           1591000  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Oslo3.set_index('Location', inplace=True)\n",
    "\n",
    "# let's view the first five elements and see how the dataframe was changed\n",
    "df_Oslo3.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize in a barchart the most family oriented districts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# step 2: plot data\n",
    "## THIS CHART HAS TO  BE SORTED\n",
    "df_Oslo3.plot(kind='barh', figsize=(10, 6))\n",
    "\n",
    "plt.xlabel('Families with Children over the total Households in the district') # add to x-label to the plot\n",
    "plt.ylabel('Household Type/ Total Households') # add y-label to the plot\n",
    "plt.title('Family  with Children %') # add title to the plot\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize the relationship between household income and  household type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#df_Olso3.plt.scatter('Household Type/ Total Households', 'Total income, median (NOK), c =\"blue\") \n",
    "#df_Oslo3.plot(kind='scatter',x='Household Type/ Total Households',y='Total income, median (NOK)')\n",
    "#plt.show()\n",
    "                     \n",
    "x = df_Oslo3['Household Type/ Total Households'].values\n",
    "y = df_Oslo3['Total income, median (NOK)'].values\n",
    "types = df_Oslo3.reset_index()['Location'].values\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10,10))\n",
    "ax.scatter(x, y)\n",
    "\n",
    "ax.set_xlabel('Percentage of household type \"Families with children\"', fontsize=14)\n",
    "ax.set_ylabel('Total Household Median Income NOK', fontsize=14)\n",
    "ax.set_title('Household type \"Families with children\"and median Income', fontsize=18)\n",
    "\n",
    "for i, txt in enumerate(types):\n",
    "    ax.annotate(txt, (x[i], y[i]), xytext=(10,10), textcoords='offset points')\n",
    "    plt.scatter(x, y, marker='x', color='red')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- ELABORATE . TO BE COMPLETED\n",
    "- We  can see  clearly the family oriented areas and the income.\n",
    "For example Vestre Aker has the highest household median income, and around 25% of the households are families with children.\n",
    "WE could conclude that Vestre Aker, Sandvika, Nordre Aker,Norstrand and Uller are the most affluent family oriented areas while Ostenjo,Bjerke,Sondre Nordstrand,Stovner, Grorud and Alna while also being family oriented constitute the middle income group.\n",
    "\n",
    "Other districts household structure is dominated by single person households therefore not so interesting for the purpose of this exercise."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5. Discussion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Elaborate  on the following items\n",
    "- The data from Foursquare API  is limited and thus the clustering must be taken with a pinch of salt\n",
    "- Main difficulty was to find the relevant  data\n",
    "- It was not posible to obtain a geojason dataset with Oslo districts boundaries. should it be available it could be used to better show  the socioeconomic features\n",
    "- The results are not  completely unbiased as i knew what i was looking for. On the other side the data confirm my personal knowledge of Oslo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
